
remote_local() {
  if [[ ! "$SSH_CONNECTION" ]];then
    echo -ne "${yellowb}(local)${end}"
  else
    echo -ne "${redb}(remote)${end}"
  fi
}

set_title() {
    echo -ne "\033]0;[${1}] ${debian_chroot:+($debian_chroot)}\u@\h:\w\007"
}

function get_arch() {
    echo "${lightblueb}$(uname -m)${end}"
}

function face_input(){
     local saveExit=$?
     #echo "test ${saveExit}"
     if [[ ${saveExit} != 0 ]] ;then
        echo -e "${red}0-0${end}"
     else
        echo -e "${yellow}^-^${end}"
     fi
     #echo -e ${g_face}
}

function username_host() {
    if [ $(id -u) != 0 ];then
        echo -e "${green}\u${end}@${yellow}\h${end}"
    else
        echo -e "${red}\u${end}@${yellow}\h${end}"
    fi
}

function git_info() {
  # check if we're in a git repo
  git rev-parse --is-inside-work-tree &>/dev/null || return

  # quickest check for what branch we're on
  branch=$(git symbolic-ref -q HEAD | sed -e 's|^refs/heads/||')

  # check if it's dirty (via github.com/sindresorhus/pure)
  dirty=$(git diff --quiet --ignore-submodules HEAD &>/dev/null; [ $? -eq 1 ]&& echo -e "*")

  echo -e "${end} on ${purple}${branch}${dirty}${end}"
}



export PROMPT_DIRTRIM=2

COMPOSE_DOCKER_CLI_BUILD=1

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

if [ "$color_prompt" = yes ]; then
    PS1="\[$(remote_local)\] "'\[$(face_input)\]'" \[${OS}\]:\[$(get_arch)\] \[$(username_host)\] in \[${greenb}\w${end}\]"'\[$(git_info)\]'"\n-> "
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi

if [ ! -f /.dockerenv ];then
  case "$TERM" in
    xterm*|rxvt*)
      #PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
      PS1="$(set_title REAL) $PS1"
      ;;
    screen*)
      PS1="$(set_title VTY) $PS1";;
    *)
      ;;
  esac
fi

unset color_prompt force_color_prompt

